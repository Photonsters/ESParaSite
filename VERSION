//ESParasite VERSION HISTORY

/* ESParasite Data Logger v0.5
	Authors: Andy (DocMadmag) Eakin
	
	Please see /ATTRIB for full credits and OSS License Info
  	Please see /LIBRARIES for necessary libraries
  	Please see /VERSION for Hstory
	
	All Derived Content is subject to the most restrictive licence of it's source.
	
	All Original content is free and unencumbered software released into the public domain.
*/

/*
v0.5 - Fifth Release - 
	- Moved WiFi functions to their own file ESParaSite_Wifi.cpp
		- Moved init_wifi() from ESParaSite_Core.cpp to ESParaSite_Wifi.cpp
		- Wifi will attempt autoconnect first, then fall back to Config.json if neither works we will launch the Config Portal.
	- Added ESParaSite_FileConfig.cpp for config file functions
		- Implemented SPIFFS for /config.json (Issue #3)
		- Added loadConfig()
		- Added saveConfig()
	- Added initial config via Web Portal (Issue #2)
		- Added ESParaSite_PortalConfig.cpp for wifiManager/config portal functions
		- Implemented Ken Taylor's Branch of wifiManager Library for initial configuration https://github.com/kentaylor/WiFiManager
		- Configuration stored in /config.json on SPIFFS.

*/

/*
v0.4 - Fourth Release - Diphyllobothriasis - 2019-09-05
	- Added support for DHT12 Sensor and AT24C32 EEPROM.
	- ESParaSite now records the following values to EEPROM - first_on_timestamp (immutable), eeprom_format_version, last_write_timestamp, lcd_screen_life, led_life, fep_life.
		-These values can be queried http://<ipaddress>/enclosure
		-(not yet implemented) lcd_screen_life, led_life, fep_life values will be resettable via the REST interface.
	- EEPROM error handling and wear levelling.  This will allow us to log 8 separate 32-bit values twice each minute for over 13 years.
	- Changes to DHT12 Sensor, DS3231 RTC and AT4C32 EEPROM Libraries.  I am happy with the capabilites and performance of these libraries.
	- Lots of refactoring to make code more modular. This will make adding support for other sensors, RTCs and EEPROM chips much easier in the future.
	- Refactored initialization routines to standardize call to init routine for a given sensor and abstract the various routines created by different libraries and authors.
	- Added error handling to many sensor routines.
*/
/*
v0.3 - Third Release - Crabs - 2019-04-07
	- Removed DHT12 Support, temporarily, while I find a better library.
	- Migrated to Platform.IO for substantially better development experience.
		- Required refactoring code to make it fully C++ complaint. (I'm a Real Boy!)
*/
/*
v0.2 - Second Release - Bed Bugs - 2019-04-07
	- Adds support for the BME280 Sensor (For Ambient Temperature, Temperature, Humidity and Altitude.)
	- Nearly all code has been refactored! (I just love saying that) Since we are relying on 3rd party open source libraries, 
		each one is a bit different in how it behaves. Refactoring has prioritized standardization across the main functions 
		and attempted to limit snowflakes to the functions that talk to the various sensor libraries.
	- HTTP server re-created as RESTful api with JSON returns. (Currently GET only)
	- Sensor data has been organized into 4 key groupings or "classes" 
		- Ambient - The room an environment in which the printer lives (Temp, Humidity, Barometric Pressure, Altitude)
		- Chamber - The printing chamber itself. (Temp, Humidity, Dewpoint)
		- Optics - The LCD Screen and UV LED (UV, Visible light, IR light, LED Temp and LCD Temp)
		- Enclosure - The base of the printer that contains the MainBoard and Optics (Temperature)
		- All classes have a timestamp as part of the return value.	
*/
/*
v0.1 - Initial release! - Amebiasis - 2019-04-03
	- What it does:
		- Connects to Wifi
		- Launches a webserver
		- opens I2C communication
		- Talks to the following sensors:
			- DHT12 (untested)
			- MLX90614
			- SI1145
		- Talks to DS3231
			- If time not set, sets time to Compile Time
			- Reads Timestamp
		- Writes all sensor data to Serial port
		- DHT12 Temperature and Humidity are available by querying http://<ipaddress>/chamberTemp and /chamberHumidity
		- SI1145 UV index is available by querying http://<ipaddress>/uvledStatus
	-Lots left to do!
*/

